---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.database.namespace }}

---
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: {{ .Values.database.namespace }}
type: Opaque
stringData:
  MYSQL_ROOT_PASSWORD: {{ .Values.database.rootPassword }}
  MYSQL_USER: {{ .Values.database.user }}
  MYSQL_PASSWORD: {{ .Values.database.password }}
  MYSQL_DATABASE: {{ .Values.database.dbName }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
  namespace: {{ .Values.database.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      securityContext:
        fsGroup: 999  # ensures MySQL can write to the volume
      containers:
        - name: database
          image: {{ .Values.database.image }}
          ports:
            - containerPort: {{ .Values.database.port }}
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: MYSQL_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: MYSQL_DATABASE
          volumeMounts:
            - name: db-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: db-storage
          persistentVolumeClaim:
            claimName: db-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: database
  namespace: {{ .Values.database.namespace }}
spec:
  type: ClusterIP
  selector:
    app: database
  ports:
    - port: {{ .Values.database.port }}
      targetPort: {{ .Values.database.port }}

---
# Static PersistentVolume (optional for dev environments)
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-pv
spec:
  capacity:
    storage: {{ .Values.database.pvSize }}
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: {{ .Values.database.storageClassName }}
  hostPath:
    path: /c/Users/User/cicdfinal


---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-pvc
  namespace: {{ .Values.database.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.database.pvcSize }}
  storageClassName: {{ .Values.database.storageClassName }}
